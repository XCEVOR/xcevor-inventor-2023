/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.3 phantoms.glb --transform
*/

import React, { useRef,useLayoutEffect } from 'react'
import { useGLTF,useScroll } from '@react-three/drei'
import {useFrame} from '@react-three/fiber'
import gsap from 'gsap'

export function DecoMoon(props) {
  const { nodes, materials } = useGLTF('./models/object/deco-moon-transformed.glb')
  const robot = useRef()
  const scroll = useScroll()
  const tl = useRef()

  useFrame((state, delta)=>{
    tl.current.seek(scroll.offset * tl.current.duration())
  })

  useLayoutEffect(()=> {
    tl.current = gsap.timeline({defaults: {duration: 2, ease: 'power1.inOut'}})

    tl.current
    .to(robot.current.position, {x: 2.5}, 0)
    // .to(robot.current.rotation, {x: Math.PI/2}, 0)
    .to(robot.current.rotation, {y: 1*Math.PI}, 0)

    // .to(robot.current.rotation, {x: Math.PI/10}, 3)
    .to(robot.current.rotation, {y: 2*Math.PI}, 2)
    // .to(robot.current.rotation, {y: 3*Math.PI}, 3)
    // .to(robot.current.rotation, {y: 4*Math.PI}, 4)

    // .to(robot.current.rotation, {y: 0}, 4)    

    .to(robot.current.rotation, {y: 4*Math.PI}, 11)
    // .to(robot.current.rotation, {x: 1}, 11)
    // .to(robot.current.position, {x: 3}, 11)

    // .to(robot.current.rotation, {y: 0}, 13)
    // .to(robot.current.rotation, {x: -1}, 13)    
    // .to(robot.current.position, {x: 3}, 13)

    // .to(robot.current.rotation, {y: 0}, 16)   
    // .to(robot.current.rotation, {x: 0}, 16) 
    // .to(robot.current.position, {x: 3}, 16)    

    
    // .to(robot.current.rotation, {x: 0}, 20) 
    .to(robot.current.rotation, {y: 0}, 20)   
    .to(robot.current.position, {x: 2.5}, 20)   

  },[])
  
  return (
    <group {...props} dispose={null} ref={robot}>      
      <mesh geometry={nodes.moon.geometry} material={nodes.moon.material} position={[0, 0, 0]} rotation={[1*Math.PI/2, 0, 0]} scale={[1, 1, 1]}/>
    </group>
  )
}

useGLTF.preload('./models/object/deco-moon-transformed.glb')

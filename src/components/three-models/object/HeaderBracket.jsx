/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.3 phantoms.glb --transform
*/

import React, { useRef,useLayoutEffect } from 'react'
import { useGLTF,useScroll } from '@react-three/drei'
import {useFrame} from '@react-three/fiber'
import gsap from 'gsap'

export function HeaderBracket(props) {
  const { nodes, materials } = useGLTF('./models/object/header-bracket-transformed.glb')

  const myxxxRef = useRef()
  const scroll = useScroll()
  const tl = useRef()

  useFrame((state, delta)=>{
    tl.current.seek(scroll.offset * tl.current.duration())
  })

  useLayoutEffect(()=> {
    // tl.current = gsap.timeline({defaults: {duration: 2, ease: 'power1.inOut'}})
    tl.current = gsap.timeline({defaults: {duration: 2}})


    tl.current
    // .to(myxxxRef.current.scale, {scale: 10}, 0)
    .to(myxxxRef.current.position, {z: -5}, 0)

    // .to(myxxxRef.current.rotation, {x: 2*Math.PI}, 1)
    // .to(myxxxRef.current.position, {x: 2}, 1)
    // .to(myxxxRef.current.position, {z: 2}, 1)


    // .to(myxxxRef.current.rotation, {x: 4*Math.PI}, 2)
    // .to(myxxxRef.current.rotation, {y: -Math.PI/16}, 2)
    // .to(myxxxRef.current.rotation, {z: +Math.PI/48}, 2)
    // .to(myxxxRef.current.position, {x: 4}, 2)
    // .to(myxxxRef.current.position, {y: -5}, 2)
    // .to(myxxxRef.current.position, {z: -6}, 2)


    // .to(myxxxRef.current.rotation, {x: 2*Math.PI}, 5)
    // .to(myxxxRef.current.position, {x: -2}, 5)
    // .to(myxxxRef.current.position, {z: 2}, 5)

    // .to(myxxxRef.current.rotation, {x: 0}, 6)
    // .to(myxxxRef.current.rotation, {y: +Math.PI/16}, 6)
    // .to(myxxxRef.current.rotation, {z: -Math.PI/48}, 6)
    // .to(myxxxRef.current.position, {x: -4}, 6)
    // .to(myxxxRef.current.position, {y: -5}, 6)
    // .to(myxxxRef.current.position, {z: -6}, 6)


    // .to(myxxxRef.current.rotation, {x: 2*Math.PI}, 9)
    // .to(myxxxRef.current.position, {x: 2}, 9)
    // .to(myxxxRef.current.position, {z: 2}, 9)

    // .to(myxxxRef.current.rotation, {x: 4*Math.PI}, 10)
    // .to(myxxxRef.current.rotation, {y: -Math.PI/16}, 10)
    // .to(myxxxRef.current.rotation, {z: +Math.PI/48}, 10)
    // .to(myxxxRef.current.position, {x: 4}, 10)
    // .to(myxxxRef.current.position, {y: -5}, 10)
    // .to(myxxxRef.current.position, {z: -6}, 10)


    // .to(myxxxRef.current.rotation, {y: 0}, 13)
    .to(myxxxRef.current.rotation, {x: 0}, 14)
    .to(myxxxRef.current.rotation, {y: 0}, 14)
    .to(myxxxRef.current.rotation, {z: 0}, 14)
    .to(myxxxRef.current.position, {x: 0}, 14)
    .to(myxxxRef.current.position, {y: 0}, 14)
    .to(myxxxRef.current.position, {z: 0}, 14)
  
    .to(myxxxRef.current.rotation, {x: 0}, 20) 
    .to(myxxxRef.current.position, {x: 0}, 20)   

  },[])


  return (
    <group {...props} dispose={null} ref={myxxxRef}>
      {/* <mesh geometry={nodes.Cube.geometry} material={nodes.Cube.material} rotation={[Math.PI / 2, Math.PI / 4, 0]} scale={[2.5, 1, 1]} /> */}
      {/* <mesh geometry={nodes.Cube.geometry} material={materials.Material} /> */}
      <mesh geometry={nodes.Curve.geometry} material={nodes.Curve.material} position={[-2.391, 0, 0]} rotation={[1*Math.PI/2, 0, 0]} scale={[30, 30, 30]}/>
      {/* <mesh geometry={nodes.Cube.geometry} material={materials.Metal} castShadow>
          <meshPhysicalMaterial 
            color="#aaa"  
            roughness={0.2}
            metalness={1}
            reflectivity={0.5}
            iridescence={0.3}
            iridescenceIOR={1}
            iridescenceThicknessRange={[100,1000]}           
          />
        </mesh> */}
    </group>
  )
}

useGLTF.preload('./models/object/header-bracket-transformed.glb')
